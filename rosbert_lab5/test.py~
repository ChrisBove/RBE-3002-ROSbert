#!/usr/bin/env python
from geometry_msgs.msg import Point
import hashlib

class aNode: 
	def __init__(self, point, val, huer, g): 
		self.point = point
		self.val = val 
		self.huer = huer 
		self.g = g 
		self.adjacent = list()
		self.f = 0
		self.cameFrom = -1
 		self.key = (str(self.point.x) + "," + str(self.point.y)) 
	def addParent(self, index): 
		self.cameFrom = (index) 

#returns in meters the point of the current index
def getWorldPointFromIndex(index):
	point=Point()
	#print "GetX: %i" % getX(index)
	point.x=(getX(index)*resolution)+offsetX + (1.5 * resolution)
	point.y=(getY(index)*resolution)+offsetY + (.5 * resolution)
	point.z=0
	return point 


def nodeKey(point): 
	return (str(point.x) + "," + str(point.y)) 
def run(): 
	
	pointList = list()
	for i in range (0,20): 
		point = Point () 
		point.x = i 
		point.y = i 
		pointList.append(point) 
	
	pointdict = dict() 
	for point in pointList: 
		node = aNode(point, 0,0,0,) 

		pointdict.update({node.key:node}) 

	print pointdict.keys()	
	for i in range (0,20): 
		point = Point () 
		point.x = i 
		point.y = i 
		
		string =  str(nodeKey(point))
		print string
		node = pointdict.get(string)
				
		print node.point,
		print node.val 

	for i in range (0,20): 
		point = Point () 
		point.x = i 
		point.y = i 
		node = aNode(point, i,0,0,) 
		pointdict.update({node.key:node}) 
		
	print "UPDATING THE LIST" 
	for i in range (0,20): 
		point = Point () 
		point.x = i 
		point.y = i 
		
		string =  str(nodeKey(point))
		print string
		node = pointdict.get(string)
				
		print node.point,
		print node.val 


if __name__ == '__main__':
   run()
